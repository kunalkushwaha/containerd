// Code generated by protoc-gen-gogo.
// source: debugger.proto
// DO NOT EDIT!

/*
	Package debugger is a generated protocol buffer package.

	It is generated from these files:
		debugger.proto

	It has these top-level messages:
		CreateDebugRequest
		DebugResponse
		MemInfo
*/
package debugger

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateDebugRequest struct {
	StackDump bool `protobuf:"varint,1,opt,name=stackDump,proto3" json:"stackDump,omitempty"`
	MemInfo   bool `protobuf:"varint,2,opt,name=memInfo,proto3" json:"memInfo,omitempty"`
}

func (m *CreateDebugRequest) Reset()                    { *m = CreateDebugRequest{} }
func (*CreateDebugRequest) ProtoMessage()               {}
func (*CreateDebugRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebugger, []int{0} }

type DebugResponse struct {
	Version   string   `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	GitCommit string   `protobuf:"bytes,2,opt,name=GitCommit,proto3" json:"GitCommit,omitempty"`
	StackDump string   `protobuf:"bytes,3,opt,name=StackDump,proto3" json:"StackDump,omitempty"`
	MemInfo   *MemInfo `protobuf:"bytes,4,opt,name=memInfo" json:"memInfo,omitempty"`
}

func (m *DebugResponse) Reset()                    { *m = DebugResponse{} }
func (*DebugResponse) ProtoMessage()               {}
func (*DebugResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebugger, []int{1} }

type MemInfo struct {
	Alloc      uint64 `protobuf:"varint,1,opt,name=Alloc,proto3" json:"Alloc,omitempty"`
	TotalAlloc uint64 `protobuf:"varint,2,opt,name=TotalAlloc,proto3" json:"TotalAlloc,omitempty"`
	Sys        uint64 `protobuf:"varint,3,opt,name=Sys,proto3" json:"Sys,omitempty"`
	HeapAlloc  uint64 `protobuf:"varint,4,opt,name=HeapAlloc,proto3" json:"HeapAlloc,omitempty"`
	HeapSys    uint64 `protobuf:"varint,5,opt,name=HeapSys,proto3" json:"HeapSys,omitempty"`
	StackInuse uint64 `protobuf:"varint,6,opt,name=StackInuse,proto3" json:"StackInuse,omitempty"`
	StackSys   uint64 `protobuf:"varint,7,opt,name=StackSys,proto3" json:"StackSys,omitempty"`
}

func (m *MemInfo) Reset()                    { *m = MemInfo{} }
func (*MemInfo) ProtoMessage()               {}
func (*MemInfo) Descriptor() ([]byte, []int) { return fileDescriptorDebugger, []int{2} }

func init() {
	proto.RegisterType((*CreateDebugRequest)(nil), "containerd.v1.CreateDebugRequest")
	proto.RegisterType((*DebugResponse)(nil), "containerd.v1.DebugResponse")
	proto.RegisterType((*MemInfo)(nil), "containerd.v1.MemInfo")
}
func (this *CreateDebugRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&debugger.CreateDebugRequest{")
	s = append(s, "StackDump: "+fmt.Sprintf("%#v", this.StackDump)+",\n")
	s = append(s, "MemInfo: "+fmt.Sprintf("%#v", this.MemInfo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DebugResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&debugger.DebugResponse{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "GitCommit: "+fmt.Sprintf("%#v", this.GitCommit)+",\n")
	s = append(s, "StackDump: "+fmt.Sprintf("%#v", this.StackDump)+",\n")
	if this.MemInfo != nil {
		s = append(s, "MemInfo: "+fmt.Sprintf("%#v", this.MemInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MemInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&debugger.MemInfo{")
	s = append(s, "Alloc: "+fmt.Sprintf("%#v", this.Alloc)+",\n")
	s = append(s, "TotalAlloc: "+fmt.Sprintf("%#v", this.TotalAlloc)+",\n")
	s = append(s, "Sys: "+fmt.Sprintf("%#v", this.Sys)+",\n")
	s = append(s, "HeapAlloc: "+fmt.Sprintf("%#v", this.HeapAlloc)+",\n")
	s = append(s, "HeapSys: "+fmt.Sprintf("%#v", this.HeapSys)+",\n")
	s = append(s, "StackInuse: "+fmt.Sprintf("%#v", this.StackInuse)+",\n")
	s = append(s, "StackSys: "+fmt.Sprintf("%#v", this.StackSys)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDebugger(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringDebugger(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DebuggerService service

type DebuggerServiceClient interface {
	DumpDebugInfo(ctx context.Context, in *CreateDebugRequest, opts ...grpc.CallOption) (*DebugResponse, error)
}

type debuggerServiceClient struct {
	cc *grpc.ClientConn
}

func NewDebuggerServiceClient(cc *grpc.ClientConn) DebuggerServiceClient {
	return &debuggerServiceClient{cc}
}

func (c *debuggerServiceClient) DumpDebugInfo(ctx context.Context, in *CreateDebugRequest, opts ...grpc.CallOption) (*DebugResponse, error) {
	out := new(DebugResponse)
	err := grpc.Invoke(ctx, "/containerd.v1.DebuggerService/DumpDebugInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DebuggerService service

type DebuggerServiceServer interface {
	DumpDebugInfo(context.Context, *CreateDebugRequest) (*DebugResponse, error)
}

func RegisterDebuggerServiceServer(s *grpc.Server, srv DebuggerServiceServer) {
	s.RegisterService(&_DebuggerService_serviceDesc, srv)
}

func _DebuggerService_DumpDebugInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebuggerServiceServer).DumpDebugInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.v1.DebuggerService/DumpDebugInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebuggerServiceServer).DumpDebugInfo(ctx, req.(*CreateDebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebuggerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "containerd.v1.DebuggerService",
	HandlerType: (*DebuggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DumpDebugInfo",
			Handler:    _DebuggerService_DumpDebugInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "debugger.proto",
}

func (m *CreateDebugRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDebugRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StackDump {
		dAtA[i] = 0x8
		i++
		if m.StackDump {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MemInfo {
		dAtA[i] = 0x10
		i++
		if m.MemInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DebugResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebugger(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.GitCommit) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebugger(dAtA, i, uint64(len(m.GitCommit)))
		i += copy(dAtA[i:], m.GitCommit)
	}
	if len(m.StackDump) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebugger(dAtA, i, uint64(len(m.StackDump)))
		i += copy(dAtA[i:], m.StackDump)
	}
	if m.MemInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebugger(dAtA, i, uint64(m.MemInfo.Size()))
		n1, err := m.MemInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *MemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Alloc != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebugger(dAtA, i, uint64(m.Alloc))
	}
	if m.TotalAlloc != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebugger(dAtA, i, uint64(m.TotalAlloc))
	}
	if m.Sys != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebugger(dAtA, i, uint64(m.Sys))
	}
	if m.HeapAlloc != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebugger(dAtA, i, uint64(m.HeapAlloc))
	}
	if m.HeapSys != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebugger(dAtA, i, uint64(m.HeapSys))
	}
	if m.StackInuse != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDebugger(dAtA, i, uint64(m.StackInuse))
	}
	if m.StackSys != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDebugger(dAtA, i, uint64(m.StackSys))
	}
	return i, nil
}

func encodeFixed64Debugger(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Debugger(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDebugger(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateDebugRequest) Size() (n int) {
	var l int
	_ = l
	if m.StackDump {
		n += 2
	}
	if m.MemInfo {
		n += 2
	}
	return n
}

func (m *DebugResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDebugger(uint64(l))
	}
	l = len(m.GitCommit)
	if l > 0 {
		n += 1 + l + sovDebugger(uint64(l))
	}
	l = len(m.StackDump)
	if l > 0 {
		n += 1 + l + sovDebugger(uint64(l))
	}
	if m.MemInfo != nil {
		l = m.MemInfo.Size()
		n += 1 + l + sovDebugger(uint64(l))
	}
	return n
}

func (m *MemInfo) Size() (n int) {
	var l int
	_ = l
	if m.Alloc != 0 {
		n += 1 + sovDebugger(uint64(m.Alloc))
	}
	if m.TotalAlloc != 0 {
		n += 1 + sovDebugger(uint64(m.TotalAlloc))
	}
	if m.Sys != 0 {
		n += 1 + sovDebugger(uint64(m.Sys))
	}
	if m.HeapAlloc != 0 {
		n += 1 + sovDebugger(uint64(m.HeapAlloc))
	}
	if m.HeapSys != 0 {
		n += 1 + sovDebugger(uint64(m.HeapSys))
	}
	if m.StackInuse != 0 {
		n += 1 + sovDebugger(uint64(m.StackInuse))
	}
	if m.StackSys != 0 {
		n += 1 + sovDebugger(uint64(m.StackSys))
	}
	return n
}

func sovDebugger(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDebugger(x uint64) (n int) {
	return sovDebugger(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateDebugRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDebugRequest{`,
		`StackDump:` + fmt.Sprintf("%v", this.StackDump) + `,`,
		`MemInfo:` + fmt.Sprintf("%v", this.MemInfo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DebugResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DebugResponse{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`GitCommit:` + fmt.Sprintf("%v", this.GitCommit) + `,`,
		`StackDump:` + fmt.Sprintf("%v", this.StackDump) + `,`,
		`MemInfo:` + strings.Replace(fmt.Sprintf("%v", this.MemInfo), "MemInfo", "MemInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MemInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MemInfo{`,
		`Alloc:` + fmt.Sprintf("%v", this.Alloc) + `,`,
		`TotalAlloc:` + fmt.Sprintf("%v", this.TotalAlloc) + `,`,
		`Sys:` + fmt.Sprintf("%v", this.Sys) + `,`,
		`HeapAlloc:` + fmt.Sprintf("%v", this.HeapAlloc) + `,`,
		`HeapSys:` + fmt.Sprintf("%v", this.HeapSys) + `,`,
		`StackInuse:` + fmt.Sprintf("%v", this.StackInuse) + `,`,
		`StackSys:` + fmt.Sprintf("%v", this.StackSys) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDebugger(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateDebugRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDebugRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDebugRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackDump", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StackDump = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemInfo = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebugger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebugger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitCommit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebugger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitCommit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackDump", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebugger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackDump = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebugger
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemInfo == nil {
				m.MemInfo = &MemInfo{}
			}
			if err := m.MemInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alloc", wireType)
			}
			m.Alloc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Alloc |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAlloc", wireType)
			}
			m.TotalAlloc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAlloc |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sys", wireType)
			}
			m.Sys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sys |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeapAlloc", wireType)
			}
			m.HeapAlloc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeapAlloc |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeapSys", wireType)
			}
			m.HeapSys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeapSys |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackInuse", wireType)
			}
			m.StackInuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StackInuse |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackSys", wireType)
			}
			m.StackSys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StackSys |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebugger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDebugger(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDebugger
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebugger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDebugger
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDebugger
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDebugger(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDebugger = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDebugger   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("debugger.proto", fileDescriptorDebugger) }

var fileDescriptorDebugger = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x52, 0xcd, 0x4e, 0xea, 0x40,
	0x14, 0x66, 0xa0, 0xfc, 0xcd, 0x0d, 0xf7, 0xde, 0x4c, 0xc8, 0x4d, 0x43, 0xc8, 0x84, 0xcb, 0x8a,
	0x55, 0x55, 0x7c, 0x02, 0x85, 0x44, 0x49, 0x34, 0x31, 0xc5, 0xb8, 0x2f, 0xe5, 0xd8, 0x34, 0xd2,
	0x4e, 0xed, 0x4c, 0x49, 0xdc, 0xf9, 0x16, 0x3e, 0x91, 0x09, 0x4b, 0x97, 0x2e, 0xa5, 0x4f, 0xe0,
	0x23, 0x98, 0x39, 0x03, 0x54, 0x70, 0x37, 0xdf, 0xf7, 0x9d, 0x9f, 0xef, 0x9c, 0x33, 0xf4, 0xf7,
	0x1c, 0x66, 0x59, 0x10, 0x40, 0xea, 0x24, 0xa9, 0x50, 0x82, 0xb5, 0x7c, 0x11, 0x2b, 0x2f, 0x8c,
	0x21, 0x9d, 0x3b, 0xcb, 0x93, 0x4e, 0x3b, 0x10, 0x81, 0x40, 0xe5, 0x48, 0xbf, 0x4c, 0x50, 0xff,
	0x8a, 0xb2, 0x51, 0x0a, 0x9e, 0x82, 0xb1, 0x4e, 0x76, 0xe1, 0x31, 0x03, 0xa9, 0x58, 0x97, 0x36,
	0xa5, 0xf2, 0xfc, 0x87, 0x71, 0x16, 0x25, 0x36, 0xe9, 0x91, 0x41, 0xc3, 0x2d, 0x08, 0x66, 0xd3,
	0x7a, 0x04, 0xd1, 0x24, 0xbe, 0x17, 0x76, 0x19, 0xb5, 0x2d, 0xec, 0xbf, 0x10, 0xda, 0xda, 0x14,
	0x92, 0x89, 0x88, 0x25, 0xe8, 0xd8, 0x3b, 0x48, 0x65, 0x28, 0x62, 0xac, 0xd3, 0x74, 0xb7, 0x50,
	0xf7, 0xb8, 0x08, 0xd5, 0x48, 0x44, 0x51, 0xa8, 0xb0, 0x4e, 0xd3, 0x2d, 0x08, 0xad, 0x4e, 0x77,
	0x0e, 0x2a, 0x46, 0xdd, 0x11, 0xec, 0xb8, 0x70, 0x60, 0xf5, 0xc8, 0xe0, 0xd7, 0xf0, 0x9f, 0xb3,
	0x37, 0xac, 0x73, 0x6d, 0xd4, 0xc2, 0xd9, 0x2b, 0xa1, 0xf5, 0x0d, 0xc9, 0xda, 0xb4, 0x7a, 0xb6,
	0x58, 0x08, 0x1f, 0x1d, 0x59, 0xae, 0x01, 0x8c, 0x53, 0x7a, 0x2b, 0x94, 0xb7, 0x30, 0x52, 0x19,
	0xa5, 0x6f, 0x0c, 0xfb, 0x4b, 0x2b, 0xd3, 0x27, 0x89, 0x5e, 0x2c, 0x57, 0x3f, 0xb5, 0xc7, 0x4b,
	0xf0, 0x12, 0x93, 0x60, 0x21, 0x5f, 0x10, 0x7a, 0x72, 0x0d, 0x74, 0x4e, 0x15, 0xb5, 0x2d, 0xd4,
	0x9d, 0x70, 0x94, 0x49, 0x9c, 0x49, 0xb0, 0x6b, 0xa6, 0x53, 0xc1, 0xb0, 0x0e, 0x6d, 0x20, 0xd2,
	0xa9, 0x75, 0x54, 0x77, 0x78, 0xe8, 0xd3, 0x3f, 0xe3, 0xcd, 0x99, 0xa7, 0x90, 0x2e, 0x43, 0x1f,
	0xd8, 0x0d, 0x6d, 0xe9, 0xa5, 0x20, 0x8d, 0xf3, 0xfd, 0x3f, 0x58, 0xc6, 0xcf, 0x03, 0x77, 0xba,
	0x07, 0x21, 0x7b, 0x47, 0x3b, 0xef, 0xae, 0xd6, 0xbc, 0xf4, 0xbe, 0xe6, 0xa5, 0xcf, 0x35, 0x27,
	0xcf, 0x39, 0x27, 0xab, 0x9c, 0x93, 0xb7, 0x9c, 0x93, 0x8f, 0x9c, 0x93, 0x59, 0x0d, 0x7f, 0xce,
	0xe9, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x77, 0xcc, 0x90, 0x70, 0x02, 0x00, 0x00,
}
